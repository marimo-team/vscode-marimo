/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  readonly "/@file/{filename_and_length}": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path: {
          /** @description The filename and byte length of the virtual file */
          readonly filename_and_length: string;
        };
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Get a virtual file */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/octet-stream": string;
          };
        };
        /** @description Invalid byte length in virtual file request */
        readonly 404: {
          headers: {
            readonly [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/ai/completion": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      /** @description The prompt to get AI completion for */
      readonly requestBody: {
        readonly content: {
          readonly "application/json": components["schemas"]["AiCompletionRequest"];
        };
      };
      readonly responses: {
        /** @description Get AI completion for a prompt */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": {
              readonly [key: string]: unknown;
            };
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/datasources/preview_column": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["PreviewDatasetColumnRequest"];
        };
      };
      readonly responses: {
        /** @description Preview a column in a dataset */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/documentation/snippets": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Load the snippets for the documentation page */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["Snippets"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/export/auto_export/html": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["ExportAsHTMLRequest"];
        };
      };
      readonly responses: {
        /** @description Export the notebook as HTML */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        /** @description File must be saved before downloading */
        readonly 400: {
          headers: {
            readonly [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/export/auto_export/markdown": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["ExportAsMarkdownRequest"];
        };
      };
      readonly responses: {
        /** @description Export the notebook as a markdown */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        /** @description File must be saved before downloading */
        readonly 400: {
          headers: {
            readonly [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/export/html": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["ExportAsHTMLRequest"];
        };
      };
      readonly responses: {
        /** @description Export the notebook as HTML */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/html": string;
          };
        };
        /** @description File must be saved before downloading */
        readonly 400: {
          headers: {
            readonly [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/export/markdown": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["ExportAsMarkdownRequest"];
        };
      };
      readonly responses: {
        /** @description Export the notebook as a markdown */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/plain": string;
          };
        };
        /** @description File must be saved before downloading */
        readonly 400: {
          headers: {
            readonly [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/export/script": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["ExportAsScriptRequest"];
        };
      };
      readonly responses: {
        /** @description Export the notebook as a script */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/plain": string;
          };
        };
        /** @description File must be saved before downloading */
        readonly 400: {
          headers: {
            readonly [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/files/create": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["FileCreateRequest"];
        };
      };
      readonly responses: {
        /** @description Create a new file or directory */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["FileCreateResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/files/delete": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["FileDeleteRequest"];
        };
      };
      readonly responses: {
        /** @description Delete a file or directory */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["FileDeleteResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/files/file_details": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["FileDetailsRequest"];
        };
      };
      readonly responses: {
        /** @description Get details of a specific file or directory */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["FileDetailsResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/files/list_files": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["FileListRequest"];
        };
      };
      readonly responses: {
        /** @description List files and directories in a given path */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["FileListResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/files/move": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["FileMoveRequest"];
        };
      };
      readonly responses: {
        /** @description Move a file or directory */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["FileMoveResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/files/update": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["FileUpdateRequest"];
        };
      };
      readonly responses: {
        /** @description Update a file or directory */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["FileUpdateResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/home/recent_files": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Get the recent files */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["RecentFilesResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/home/running_notebooks": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Get the running files */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["RunningNotebooksResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/home/shutdown_session": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["ShutdownSessionRequest"];
        };
      };
      readonly responses: {
        /** @description Shutdown the current session */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["RunningNotebooksResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/home/tutorial/open": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["OpenTutorialRequest"];
        };
      };
      readonly responses: {
        /** @description Open a new tutorial */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["MarimoFile"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/home/workspace_files": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["WorkspaceFilesRequest"];
        };
      };
      readonly responses: {
        /** @description Get the files in the workspace */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["WorkspaceFilesResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/code_autocomplete": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["CodeCompletionRequest"];
        };
      };
      readonly responses: {
        /** @description Complete a code fragment */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/copy": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["CopyNotebookRequest"];
        };
      };
      readonly responses: {
        /** @description Copy notebook */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/plain": string;
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/delete": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["DeleteCellRequest"];
        };
      };
      readonly responses: {
        /** @description Delete a cell */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/format": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["FormatRequest"];
        };
      };
      readonly responses: {
        /** @description Format code */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["FormatResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/function_call": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["FunctionCallRequest"];
        };
      };
      readonly responses: {
        /** @description Invoke an RPC */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/install_missing_packages": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["InstallMissingPackagesRequest"];
        };
      };
      readonly responses: {
        /** @description Install missing packages */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/instantiate": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["InstantiateRequest"];
        };
      };
      readonly responses: {
        /** @description Instantiate a component */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/interrupt": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Interrupt the kernel's execution */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/open": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["OpenFileRequest"];
        };
      };
      readonly responses: {
        /** @description Open a file */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
        /** @description File does not exist */
        readonly 400: {
          headers: {
            readonly [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/read_code": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Read the code from the server */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["ReadCodeResponse"];
          };
        };
        /** @description File must be saved before downloading */
        readonly 400: {
          headers: {
            readonly [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/rename": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["RenameFileRequest"];
        };
      };
      readonly responses: {
        /** @description Rename the current app */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/restart_session": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Restart the current session without affecting other sessions. */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/run": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["RunRequest"];
        };
      };
      readonly responses: {
        /** @description Run a cell. Updates cell code in the kernel if needed; registers new cells for unseen cell IDs. Only allowed in edit mode. */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/save": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["SaveNotebookRequest"];
        };
      };
      readonly responses: {
        /** @description Save the current app */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/plain": string;
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/save_app_config": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["SaveAppConfigurationRequest"];
        };
      };
      readonly responses: {
        /** @description Save the app configuration */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/plain": string;
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/save_user_config": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["SaveUserConfigurationRequest"];
        };
      };
      readonly responses: {
        /** @description Update the user config on disk and in the kernel. Only allowed in edit mode. */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/scratchpad/run": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["RunScratchpadRequest"];
        };
      };
      readonly responses: {
        /** @description Run the scratchpad */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/set_cell_config": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["SetCellConfigRequest"];
        };
      };
      readonly responses: {
        /** @description Set the configuration of a cell */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/set_ui_element_value": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["UpdateComponentValuesRequest"];
        };
      };
      readonly responses: {
        /** @description Set UI element values */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/shutdown": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Shutdown the kernel */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/stdin": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["StdinRequest"];
        };
      };
      readonly responses: {
        /** @description Send input to the stdin stream */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/kernel/sync/cell_ids": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["UpdateCellIdsRequest"];
        };
      };
      readonly responses: {
        /** @description Sync cell ids */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["SuccessResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/packages/add": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["AddPackageRequest"];
        };
      };
      readonly responses: {
        /** @description Install package */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["PackageOperationResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/packages/list": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description List installed packages */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["ListPackagesResponse"];
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/packages/remove": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/json": components["schemas"]["RemovePackageRequest"];
        };
      };
      readonly responses: {
        /** @description Uninstall package */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": components["schemas"]["PackageOperationResponse"];
          };
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/status": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Get the status of the application */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": {
              readonly filenames?: readonly string[];
              readonly lsp_running?: boolean;
              readonly mode?: string;
              readonly node_version?: string;
              readonly requirements?: readonly string[];
              readonly sessions?: number;
              readonly status?: string;
              readonly version?: string;
            };
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/usage": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Get the current memory and CPU usage of the application */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "application/json": {
              readonly cpu: {
                readonly percent: number;
              };
              readonly kernel?: {
                readonly memory?: number;
              };
              readonly memory: {
                readonly available: number;
                readonly free: number;
                readonly percent: number;
                readonly total: number;
                readonly used: number;
              };
              readonly server?: {
                readonly memory: number;
              };
            };
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/api/version": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: never;
      readonly responses: {
        /** @description Get the version of the application */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/plain": string;
          };
        };
      };
    };
    readonly put?: never;
    readonly post?: never;
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
  readonly "/auth/login": {
    readonly parameters: {
      readonly query?: never;
      readonly header?: never;
      readonly path?: never;
      readonly cookie?: never;
    };
    readonly get?: never;
    readonly put?: never;
    /** Submit login form */
    readonly post: {
      readonly parameters: {
        readonly query?: never;
        readonly header?: never;
        readonly path?: never;
        readonly cookie?: never;
      };
      readonly requestBody?: {
        readonly content: {
          readonly "application/x-www-form-urlencoded": {
            /** @description Access token or password */
            readonly password?: string;
          };
        };
      };
      readonly responses: {
        /** @description Login page */
        readonly 200: {
          headers: {
            readonly [name: string]: unknown;
          };
          content: {
            readonly "text/html": string;
          };
        };
        /** @description Redirect to the next URL */
        readonly 302: {
          headers: {
            readonly Location?: string;
            readonly [name: string]: unknown;
          };
          content?: never;
        };
      };
    };
    readonly delete?: never;
    readonly options?: never;
    readonly head?: never;
    readonly patch?: never;
    readonly trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    readonly AddPackageRequest: {
      readonly package: string;
    };
    readonly AiCompletionRequest: {
      readonly code: string;
      readonly context?: {
        readonly schema: readonly {
          readonly columns: readonly {
            readonly name: string;
            readonly type: string;
          }[];
          readonly name: string;
        }[];
      } | null;
      readonly includeOtherCode: string;
      /** @enum {string} */
      readonly language: "python" | "markdown" | "sql";
      readonly prompt: string;
    };
    readonly Alert: {
      readonly description: string;
      /** @enum {string} */
      readonly name: "alert";
      readonly title: string;
      /** @enum {string|null} */
      readonly variant?: "danger" | null;
    };
    readonly AppMetadata: {
      readonly cliArgs: {
        readonly [key: string]:
          | string
          | boolean
          | number
          | readonly (string | boolean | number)[];
      };
      readonly filename?: string | null;
      readonly queryParams: {
        readonly [key: string]: string | readonly string[];
      };
    };
    readonly Banner: {
      /** @enum {string|null} */
      readonly action?: "restart" | null;
      readonly description: string;
      /** @enum {string} */
      readonly name: "banner";
      readonly title: string;
      /** @enum {string|null} */
      readonly variant?: "danger" | null;
    };
    readonly BaseResponse: {
      readonly success: boolean;
    };
    /** @enum {string} */
    readonly CellChannel:
      | "stdout"
      | "stderr"
      | "stdin"
      | "pdb"
      | "output"
      | "marimo-error"
      | "media";
    readonly CellConfig: {
      readonly disabled: boolean;
      readonly hide_code: boolean;
    };
    readonly CellOp: {
      readonly cell_id: string;
      readonly console?:
        | (
            | components["schemas"]["CellOutput"]
            | readonly components["schemas"]["CellOutput"][]
          )
        | null;
      /** @enum {string} */
      readonly name: "cell-op";
      readonly output?: components["schemas"]["CellOutput"];
      readonly stale_inputs?: boolean | null;
      readonly status?: components["schemas"]["RuntimeState"];
      readonly timestamp: number;
    };
    readonly CellOutput: {
      readonly channel: components["schemas"]["CellChannel"];
      readonly data:
        | string
        | readonly components["schemas"]["Error"][]
        | {
            readonly [key: string]: unknown;
          };
      readonly mimetype: components["schemas"]["MimeType"];
      readonly timestamp: number;
    };
    readonly CodeCompletionRequest: {
      readonly cellId: string;
      readonly document: string;
      readonly id: string;
    };
    readonly ColumnSummary: {
      readonly false?: number | null;
      readonly max?: components["schemas"]["NonNestedLiteral"];
      readonly mean?: components["schemas"]["NonNestedLiteral"];
      readonly median?: components["schemas"]["NonNestedLiteral"];
      readonly min?: components["schemas"]["NonNestedLiteral"];
      readonly nulls?: number | null;
      readonly p25?: components["schemas"]["NonNestedLiteral"];
      readonly p5?: components["schemas"]["NonNestedLiteral"];
      readonly p75?: components["schemas"]["NonNestedLiteral"];
      readonly p95?: components["schemas"]["NonNestedLiteral"];
      readonly std?: components["schemas"]["NonNestedLiteral"];
      readonly total?: number | null;
      readonly true?: number | null;
      readonly unique?: number | null;
    };
    readonly CompletedRun: {
      /** @enum {string} */
      readonly name: "completed-run";
    };
    readonly CompletionResult: {
      readonly completion_id: string;
      /** @enum {string} */
      readonly name: "completion-result";
      readonly options: readonly {
        readonly completion_info?: string | null;
        readonly name: string;
        readonly type: string;
      }[];
      readonly prefix_length: number;
    };
    readonly CopyNotebookRequest: {
      readonly destination: string;
      readonly source: string;
    };
    readonly CreationRequest: {
      readonly executionRequests: readonly components["schemas"]["ExecutionRequest"][];
      readonly setUiElementValueRequest: components["schemas"]["SetUIElementValueRequest"];
    };
    readonly CycleError: {
      readonly edges_with_vars: readonly (readonly [
        string,
        readonly string[],
        string,
      ])[];
      /** @enum {string} */
      readonly type: "cycle";
    };
    readonly DataColumnPreview: {
      readonly chart_code?: string | null;
      readonly chart_max_rows_errors: boolean;
      readonly chart_spec?: string | null;
      readonly column_name: string;
      readonly error?: string | null;
      /** @enum {string} */
      readonly name: "data-column-preview";
      readonly summary?: components["schemas"]["ColumnSummary"];
      readonly table_name: string;
    };
    readonly DataTable: {
      readonly columns: readonly components["schemas"]["DataTableColumn"][];
      readonly name: string;
      readonly num_columns?: number | null;
      readonly num_rows?: number | null;
      readonly source: string;
      /** @enum {string} */
      readonly source_type: "local" | "duckdb";
      readonly variable_name?: string | null;
    };
    readonly DataTableColumn: {
      readonly external_type: string;
      readonly name: string;
      readonly type: components["schemas"]["DataType"];
    };
    /** @enum {string} */
    readonly DataType:
      | "string"
      | "boolean"
      | "integer"
      | "number"
      | "date"
      | "unknown";
    readonly Datasets: {
      /** @enum {string|null} */
      readonly clear_channel?: "local" | "duckdb" | null;
      /** @enum {string} */
      readonly name: "datasets";
      readonly tables: readonly components["schemas"]["DataTable"][];
    };
    readonly DeleteCellRequest: {
      readonly cellId: string;
    };
    readonly DeleteNonlocalError: {
      readonly cells: readonly string[];
      readonly name: string;
      /** @enum {string} */
      readonly type: "delete-nonlocal";
    };
    readonly Error:
      | components["schemas"]["CycleError"]
      | components["schemas"]["MultipleDefinitionError"]
      | components["schemas"]["DeleteNonlocalError"]
      | components["schemas"]["MarimoAncestorStoppedError"]
      | components["schemas"]["MarimoAncestorPreventedError"]
      | components["schemas"]["MarimoExceptionRaisedError"]
      | components["schemas"]["MarimoStrictExecutionError"]
      | components["schemas"]["MarimoInterruptionError"]
      | components["schemas"]["MarimoSyntaxError"]
      | components["schemas"]["UnknownError"];
    readonly ExecuteMultipleRequest: {
      readonly cellIds: readonly string[];
      readonly codes: readonly string[];
      readonly timestamp: number;
    };
    readonly ExecuteScratchpadRequest: {
      readonly code: string;
    };
    readonly ExecuteStaleRequest: Record<string, never>;
    readonly ExecutionRequest: {
      readonly cellId: string;
      readonly code: string;
      readonly timestamp: number;
    };
    readonly ExportAsHTMLRequest: {
      readonly assetUrl?: string | null;
      readonly download: boolean;
      readonly files: readonly string[];
      readonly includeCode: boolean;
    };
    readonly ExportAsMarkdownRequest: {
      readonly download: boolean;
    };
    readonly ExportAsScriptRequest: {
      readonly download: boolean;
    };
    readonly FileCreateRequest: {
      readonly contents?: string | null;
      readonly name: string;
      readonly path: string;
      /** @enum {string} */
      readonly type: "file" | "directory";
    };
    readonly FileCreateResponse: {
      readonly info?: components["schemas"]["FileInfo"];
      readonly message?: string | null;
      readonly success: boolean;
    };
    readonly FileDeleteRequest: {
      readonly path: string;
    };
    readonly FileDeleteResponse: {
      readonly message?: string | null;
      readonly success: boolean;
    };
    readonly FileDetailsRequest: {
      readonly path: string;
    };
    readonly FileDetailsResponse: {
      readonly contents?: string | null;
      readonly file: components["schemas"]["FileInfo"];
      readonly mimeType?: string | null;
    };
    readonly FileInfo: {
      readonly children: readonly components["schemas"]["FileInfo"][];
      readonly id: string;
      readonly isDirectory: boolean;
      readonly isMarimoFile: boolean;
      readonly lastModified?: number | null;
      readonly name: string;
      readonly path: string;
    };
    readonly FileListRequest: {
      readonly path?: string | null;
    };
    readonly FileListResponse: {
      readonly files: readonly components["schemas"]["FileInfo"][];
      readonly root: string;
    };
    readonly FileMoveRequest: {
      readonly newPath: string;
      readonly path: string;
    };
    readonly FileMoveResponse: {
      readonly info?: components["schemas"]["FileInfo"];
      readonly message?: string | null;
      readonly success: boolean;
    };
    readonly FileUpdateRequest: {
      readonly contents: string;
      readonly path: string;
    };
    readonly FileUpdateResponse: {
      readonly info?: components["schemas"]["FileInfo"];
      readonly message?: string | null;
      readonly success: boolean;
    };
    readonly FocusCell: {
      readonly cell_id: string;
      /** @enum {string} */
      readonly name: "focus-cell";
    };
    readonly FormatRequest: {
      readonly codes: {
        readonly [key: string]: string;
      };
      readonly lineLength: number;
    };
    readonly FormatResponse: {
      readonly codes: {
        readonly [key: string]: string;
      };
    };
    readonly FunctionCallRequest: {
      readonly args: {
        readonly [key: string]: unknown;
      };
      readonly functionCallId: string;
      readonly functionName: string;
      readonly namespace: string;
    };
    readonly FunctionCallResult: {
      readonly function_call_id: string;
      /** @enum {string} */
      readonly name: "function-call-result";
      readonly return_value?: components["schemas"]["JSONType"];
      readonly status: components["schemas"]["HumanReadableStatus"];
    };
    readonly HumanReadableStatus: {
      /** @enum {string} */
      readonly code: "ok" | "error";
      readonly message?: string | null;
      readonly title?: string | null;
    };
    readonly InstallMissingPackagesRequest: {
      readonly manager: string;
      readonly versions: {
        readonly [key: string]: string;
      };
    };
    readonly InstallingPackageAlert: {
      /** @enum {string} */
      readonly name: "installing-package-alert";
      readonly packages: {
        readonly [key: string]:
          | "queued"
          | "installing"
          | "installed"
          | "failed";
      };
    };
    readonly InstantiateRequest: {
      readonly objectIds: readonly string[];
      readonly values: readonly unknown[];
    };
    readonly Interrupted: {
      /** @enum {string} */
      readonly name: "interrupted";
    };
    readonly JSONType:
      | string
      | number
      | Record<string, never>
      | readonly unknown[]
      | boolean
      | null;
    readonly KernelReady: {
      readonly app_config: {
        readonly app_title?: string | null;
        readonly auto_download: readonly ("html" | "markdown")[];
        readonly css_file?: string | null;
        readonly layout_file?: string | null;
        /** @enum {string} */
        readonly width: "normal" | "compact" | "medium" | "full";
      };
      readonly capabilities: {
        readonly sql: boolean;
        readonly terminal: boolean;
      };
      readonly cell_ids: readonly string[];
      readonly codes: readonly string[];
      readonly configs: readonly components["schemas"]["CellConfig"][];
      readonly kiosk: boolean;
      readonly last_executed_code?: {
        readonly [key: string]: string;
      } | null;
      readonly last_execution_time?: {
        readonly [key: string]: number;
      } | null;
      readonly layout?: {
        readonly data: {
          readonly [key: string]: unknown;
        };
        readonly type: string;
      } | null;
      /** @enum {string} */
      readonly name: "kernel-ready";
      readonly names: readonly string[];
      readonly resumed: boolean;
      readonly ui_values?: {
        readonly [key: string]:
          | (
              | {
                  readonly [key: string]: components["schemas"]["JSONType"];
                }
              | readonly components["schemas"]["JSONType"][]
              | string
              | number
              | boolean
              | components["schemas"]["MIME"]
            )
          | null;
      } | null;
    };
    readonly ListPackagesResponse: {
      readonly packages: readonly components["schemas"]["PackageDescription"][];
    };
    readonly MIME: Record<string, never>;
    readonly MarimoAncestorPreventedError: {
      readonly blamed_cell?: string | null;
      readonly msg: string;
      readonly raising_cell: string;
      /** @enum {string} */
      readonly type: "ancestor-prevented";
    };
    readonly MarimoAncestorStoppedError: {
      readonly msg: string;
      readonly raising_cell: string;
      /** @enum {string} */
      readonly type: "ancestor-stopped";
    };
    readonly MarimoConfig: {
      readonly ai: {
        readonly anthropic: {
          readonly api_key: string;
        };
        readonly open_ai: {
          readonly api_key: string;
          readonly base_url: string;
          readonly model: string;
        };
      };
      readonly completion: {
        readonly activate_on_typing: boolean;
        readonly codeium_api_key?: string | null;
        readonly copilot: boolean | ("github" | "codeium");
      };
      readonly display: {
        /** @enum {string} */
        readonly cell_output: "above" | "below";
        readonly code_editor_font_size: number;
        /** @enum {string} */
        readonly dataframes: "rich" | "plain";
        /** @enum {string} */
        readonly default_width: "normal" | "compact" | "medium" | "full";
        /** @enum {string} */
        readonly theme: "light" | "dark" | "system";
      };
      readonly experimental: {
        readonly [key: string]: unknown;
      };
      readonly formatting: {
        readonly line_length: number;
      };
      readonly keymap: {
        readonly overrides: {
          readonly [key: string]: string;
        };
        /** @enum {string} */
        readonly preset: "default" | "vim";
      };
      readonly package_management: {
        /** @enum {string} */
        readonly manager: "pip" | "rye" | "uv" | "poetry" | "pixi";
      };
      readonly runtime: {
        readonly auto_instantiate: boolean;
        /** @enum {string} */
        readonly auto_reload: "off" | "lazy" | "autorun";
        /** @enum {string} */
        readonly on_cell_change: "lazy" | "autorun";
      };
      readonly save: {
        /** @enum {string} */
        readonly autosave: "off" | "after_delay";
        readonly autosave_delay: number;
        readonly format_on_save: boolean;
      };
      readonly server: {
        readonly browser: "default" | string;
        readonly follow_symlink: boolean;
      };
    };
    readonly MarimoExceptionRaisedError: {
      readonly exception_type: string;
      readonly msg: string;
      readonly raising_cell?: string | null;
      /** @enum {string} */
      readonly type: "exception";
    };
    readonly MarimoFile: {
      readonly initializationId?: string | null;
      readonly lastModified?: number | null;
      readonly name: string;
      readonly path: string;
      readonly sessionId?: string | null;
    };
    readonly MarimoInterruptionError: {
      /** @enum {string} */
      readonly type: "interruption";
    };
    readonly MarimoStrictExecutionError: {
      readonly blamed_cell?: string | null;
      readonly msg: string;
      readonly ref: string;
      /** @enum {string} */
      readonly type: "strict-exception";
    };
    readonly MarimoSyntaxError: {
      readonly msg: string;
      /** @enum {string} */
      readonly type: "syntax";
    };
    readonly MessageOperation:
      | components["schemas"]["CellOp"]
      | components["schemas"]["FunctionCallResult"]
      | components["schemas"]["SendUIElementMessage"]
      | components["schemas"]["RemoveUIElements"]
      | components["schemas"]["Reload"]
      | components["schemas"]["Reconnected"]
      | components["schemas"]["Interrupted"]
      | components["schemas"]["CompletedRun"]
      | components["schemas"]["KernelReady"]
      | components["schemas"]["CompletionResult"]
      | components["schemas"]["Alert"]
      | components["schemas"]["Banner"]
      | components["schemas"]["MissingPackageAlert"]
      | components["schemas"]["InstallingPackageAlert"]
      | components["schemas"]["Variables"]
      | components["schemas"]["VariableValues"]
      | components["schemas"]["QueryParamsSet"]
      | components["schemas"]["QueryParamsAppend"]
      | components["schemas"]["QueryParamsDelete"]
      | components["schemas"]["QueryParamsClear"]
      | components["schemas"]["Datasets"]
      | components["schemas"]["DataColumnPreview"]
      | components["schemas"]["FocusCell"]
      | components["schemas"]["UpdateCellCodes"]
      | components["schemas"]["UpdateCellIdsRequest"];
    /** @enum {string} */
    readonly MimeType:
      | "application/json"
      | "application/vnd.marimo+error"
      | "application/vnd.marimo+traceback"
      | "application/vnd.marimo+mimebundle"
      | "application/vnd.vega.v5+json"
      | "application/vnd.vegalite.v5+json"
      | "image/png"
      | "image/svg+xml"
      | "image/tiff"
      | "image/avif"
      | "image/bmp"
      | "image/gif"
      | "image/jpeg"
      | "video/mp4"
      | "video/mpeg"
      | "text/html"
      | "text/plain"
      | "text/markdown"
      | "text/latex"
      | "text/csv";
    readonly MissingPackageAlert: {
      readonly isolated: boolean;
      /** @enum {string} */
      readonly name: "missing-package-alert";
      readonly packages: readonly string[];
    };
    readonly MultipleDefinitionError: {
      readonly cells: readonly string[];
      readonly name: string;
      /** @enum {string} */
      readonly type: "multiple-defs";
    };
    readonly NonNestedLiteral: number | string | boolean;
    readonly OpenFileRequest: {
      readonly path: string;
    };
    readonly OpenTutorialRequest: {
      readonly tutorialId:
        | (
            | "intro"
            | "dataflow"
            | "ui"
            | "markdown"
            | "plots"
            | "sql"
            | "layout"
            | "fileformat"
            | "for-jupyter-users"
          )
        | "markdown-format";
    };
    readonly PackageDescription: {
      readonly name: string;
      readonly version: string;
    };
    readonly PackageOperationResponse: {
      readonly error?: string | null;
      readonly success: boolean;
    };
    readonly PreviewDatasetColumnRequest: {
      readonly columnName: string;
      readonly source: string;
      /** @enum {string} */
      readonly sourceType: "local" | "duckdb";
      readonly tableName: string;
    };
    readonly QueryParamsAppend: {
      readonly key: string;
      /** @enum {string} */
      readonly name: "query-params-append";
      readonly value: string;
    };
    readonly QueryParamsClear: {
      /** @enum {string} */
      readonly name: "query-params-clear";
    };
    readonly QueryParamsDelete: {
      readonly key: string;
      /** @enum {string} */
      readonly name: "query-params-delete";
      readonly value?: string | null;
    };
    readonly QueryParamsSet: {
      readonly key: string;
      /** @enum {string} */
      readonly name: "query-params-set";
      readonly value: string | readonly string[];
    };
    readonly ReadCodeResponse: {
      readonly contents: string;
    };
    readonly RecentFilesResponse: {
      readonly files: readonly components["schemas"]["MarimoFile"][];
    };
    readonly Reconnected: {
      /** @enum {string} */
      readonly name: "reconnected";
    };
    readonly Reload: {
      /** @enum {string} */
      readonly name: "reload";
    };
    readonly RemovePackageRequest: {
      readonly package: string;
    };
    readonly RemoveUIElements: {
      readonly cell_id: string;
      /** @enum {string} */
      readonly name: "remove-ui-elements";
    };
    readonly RenameFileRequest: {
      readonly filename: string;
    };
    readonly RenameRequest: {
      readonly filename: string;
    };
    readonly RunRequest: {
      readonly cellIds: readonly string[];
      readonly codes: readonly string[];
    };
    readonly RunScratchpadRequest: {
      readonly code: string;
    };
    readonly RunningNotebooksResponse: {
      readonly files: readonly components["schemas"]["MarimoFile"][];
    };
    /** @enum {string} */
    readonly RuntimeState:
      | "idle"
      | "queued"
      | "running"
      | "disabled-transitively";
    readonly SaveAppConfigurationRequest: {
      readonly config: {
        readonly [key: string]: unknown;
      };
    };
    readonly SaveNotebookRequest: {
      readonly cellIds: readonly string[];
      readonly codes: readonly string[];
      readonly configs: readonly components["schemas"]["CellConfig"][];
      readonly filename: string;
      readonly layout?: {
        readonly [key: string]: unknown;
      } | null;
      readonly names: readonly string[];
      readonly persist: boolean;
    };
    readonly SaveUserConfigurationRequest: {
      readonly config: components["schemas"]["MarimoConfig"];
    };
    readonly SendUIElementMessage: {
      readonly buffers?: readonly string[] | null;
      readonly message: {
        readonly [key: string]: {
          readonly [key: string]: unknown;
        };
      };
      /** @enum {string} */
      readonly name: "send-ui-element-message";
      readonly ui_element: string;
    };
    readonly SetCellConfigRequest: {
      readonly configs: {
        readonly [key: string]: {
          readonly [key: string]: unknown;
        };
      };
    };
    readonly SetUIElementValueRequest: {
      readonly objectIds: readonly string[];
      readonly token: string;
      readonly values: readonly unknown[];
    };
    readonly SetUserConfigRequest: {
      readonly config: components["schemas"]["MarimoConfig"];
    };
    readonly ShutdownSessionRequest: {
      readonly sessionId: string;
    };
    readonly Snippet: {
      readonly sections: readonly components["schemas"]["SnippetSection"][];
      readonly title: string;
    };
    readonly SnippetSection: {
      readonly code?: string | null;
      readonly html?: string | null;
      readonly id: string;
    };
    readonly Snippets: {
      readonly snippets: readonly components["schemas"]["Snippet"][];
    };
    readonly StdinRequest: {
      readonly text: string;
    };
    readonly StopRequest: Record<string, never>;
    readonly SuccessResponse: {
      readonly success: boolean;
    };
    readonly UnknownError: {
      readonly msg: string;
      /** @enum {string} */
      readonly type: "unknown";
    };
    readonly UpdateCellCodes: {
      readonly cell_ids: readonly string[];
      readonly codes: readonly string[];
      /** @enum {string} */
      readonly name: "update-cell-codes";
    };
    readonly UpdateCellIdsRequest: {
      readonly cell_ids: readonly string[];
      /** @enum {string} */
      readonly name: "update-cell-ids";
    };
    readonly UpdateComponentValuesRequest: {
      readonly objectIds: readonly string[];
      readonly values: readonly unknown[];
    };
    readonly VariableDeclaration: {
      readonly declared_by: readonly string[];
      readonly name: string;
      readonly used_by: readonly string[];
    };
    readonly VariableValue: {
      readonly datatype?: string | null;
      readonly name: string;
      readonly value?: string | null;
    };
    readonly VariableValues: {
      /** @enum {string} */
      readonly name: "variable-values";
      readonly variables: readonly components["schemas"]["VariableValue"][];
    };
    readonly Variables: {
      /** @enum {string} */
      readonly name: "variables";
      readonly variables: readonly components["schemas"]["VariableDeclaration"][];
    };
    readonly WorkspaceFilesRequest: {
      readonly includeMarkdown: boolean;
    };
    readonly WorkspaceFilesResponse: {
      readonly files: readonly components["schemas"]["FileInfo"][];
      readonly root: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
